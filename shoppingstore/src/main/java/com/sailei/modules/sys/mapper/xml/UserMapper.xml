<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sailei.modules.sys.mapper.UserMapper">


    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        a.user_id AS "userId",
        a.account AS "account",
        a.salt AS "salt",
        a.name AS "name",
        a.birthday AS "birthday",
        a.sex AS "sex",
        a.email AS "email",
        a.phone AS "phone",
        a.photo AS "photo",
        a.dept_id AS "deptId",
        dept.name AS "deptName",
        role.roleName AS "roleName",
        role.roleIds AS "roleIds",
        a.status AS "status",
        a.create_time AS "createTime",
        a.create_user AS "createUser",
        a.update_time AS "updateTime",
        a.update_user AS "updateUser",
        a.version AS "version"
    </sql>

    <sql id="Base_Column_List_With_Pwd">
        a.user_id AS "userId",
        a.account AS "account",
        a.salt AS "salt",
        a.password AS "password",
        a.name AS "name",
        a.birthday AS "birthday",
        a.sex AS "sex",
        a.email AS "email",
        a.phone AS "phone",
        a.photo AS "photo",
        a.dept_id AS "deptId",
        dept.name AS "deptName",
        role.roleName AS "roleName",
        role.roleIds AS "roleIds",
        a.status AS "status",
        a.create_time AS "createTime",
        a.create_user AS "createUser",
        a.update_time AS "updateTime",
        a.update_user AS "updateUser",
        a.version AS "version"
	</sql>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_Joins">
        LEFT JOIN sys_dept dept ON dept.dept_id=a.dept_id
        LEFT JOIN (select re.user_id,group_concat(re.role_id) AS roleIds,group_concat(r.name) AS roleName
        from sys_user_role re LEFT JOIN sys_role r on re.role_id=r.role_id GROUP BY re.user_id) role ON role.user_id=a.user_id
    </sql>

    <!-- 根据条件查询记录列表 -->
    <select id="getByUserId" resultType="com.sailei.modules.sys.entity.User">
        SELECT
        <include refid="Base_Column_List"/>
        FROM sys_user a
        <include refid="Base_Column_Joins"/>
        WHERE a.del_flag=0 AND a.user_id=#{userId}
    </select>
    <!-- 根据条件查询记录列表 -->
    <select id="getById" resultType="com.sailei.modules.sys.entity.User">
        SELECT
        <include refid="Base_Column_List"/>
        FROM sys_user a
        <include refid="Base_Column_Joins"/>
        WHERE a.del_flag=0 AND a.user_id=#{userId}
    </select>

    <!-- 根据条件查询记录列表 -->
    <select id="queryPage" resultType="com.sailei.modules.sys.entity.User">
        SELECT
        <include refid="Base_Column_List"/>
        FROM sys_user a
        <include refid="Base_Column_Joins"/>
        WHERE a.del_flag=0
        <if test="name != null and name != ''">
            AND (a.phone LIKE CONCAT('%',#{name},'%')
            OR a.account LIKE CONCAT('%',#{name},'%')
            OR a.name LIKE CONCAT('%',#{name},'%'))
        </if>
        <if test="deptId != null and deptId != 0">
            AND (a.dept_id = #{deptId} OR a.dept_id IN ( SELECT dept_id FROM sys_dept WHERE parent_ids LIKE CONCAT('%$[', #{deptId}, '$]%') ESCAPE '$' ))
        </if>
        <choose>
            <when test="orderBy != null and orderBy != ''">
                ORDER BY ${orderBy}
            </when>
            <otherwise>
                ORDER BY a.update_time DESC
            </otherwise>
        </choose>
        <if test="page !=null and page != -1 and limit != null and limit != ''">
            limit ${page},${limit}
        </if>
    </select>

    <!-- 根据条件获取记录列表条数 -->
    <select id="queryCount" resultType="java.lang.Long">
        SELECT
          COUNT(1)
        FROM sys_user a
        <include refid="Base_Column_Joins"/>
        WHERE a.del_flag=0
        <if test="name != null and name != ''">
            AND (a.phone LIKE CONCAT('%',#{name},'%')
            OR a.account LIKE CONCAT('%',#{name},'%')
            OR a.name LIKE CONCAT('%',#{name},'%'))
        </if>
        <if test="deptId != null and deptId != 0">
            AND (a.dept_id = #{deptId} OR a.dept_id IN ( SELECT dept_id FROM sys_dept WHERE parent_ids LIKE CONCAT('%$[', #{deptId}, '$]%') ESCAPE '$' ))
        </if>
    </select>

    <!-- 根据条件获取记录列表条数 -->
    <select id="selectUsers" resultType="com.sailei.modules.sys.entity.User">
        SELECT
        <include refid="Base_Column_List"/>
        FROM sys_user a
        <include refid="Base_Column_Joins"/>
        WHERE a.status =1
        <if test="name != null and name != ''">
            AND (a.phone LIKE CONCAT('%',#{name},'%')
            OR a.account LIKE CONCAT('%',#{name},'%')
            OR a.name LIKE CONCAT('%',#{name},'%'))
        </if>
        <if test="deptId != null and deptId != 0">
            AND (a.dept_id = #{deptId} OR a.dept_id IN ( SELECT dept_id FROM sys_dept WHERE parent_ids LIKE CONCAT('%$[', #{deptId}, '$]%') ESCAPE '$' ))
        </if>
        <if test="beginTime != null and beginTime != '' and endTime != null and endTime != ''">
            AND (a.create_time BETWEEN CONCAT(#{beginTime},' 00:00:00') AND CONCAT(#{endTime},' 23:59:59'))
        </if>
    </select>

    <!-- 根据账号查询用户 -->
    <select id="getByAccount" resultType="com.sailei.modules.sys.entity.User">
        SELECT
        <include refid="Base_Column_List_With_Pwd"/>
        FROM sys_user a
        <include refid="Base_Column_Joins"/>
        WHERE a.account = #{account} AND a.del_flag=0
    </select>

    <!-- 根据deptId查询所有子deptId -->
    <select id="getDeptIds" resultType="java.lang.String">
        SELECT DISTINCT dept_id FROM sys_dept WHERE del_flag=0 and (dept_id =#{deptId} OR parent_id = #{deptId} OR parent_ids LIKE  CONCAT('%,',#{deptId},',%'))
    </select>

    <!-- 插入记录 -->
    <insert id="addUser">
        INSERT INTO sys_user (
            user_id,
            photo,
            account,
            salt,
            name,
            birthday,
            sex,
            email,
            phone,
            status,
            dept_id,
            create_time,
            create_user,
            update_time,
            update_user,
            version
        ) VALUES (
            #{userId},
            #{photo},
            #{account},
            #{salt},
            #{name},
            #{birthday},
            #{sex},
            #{email},
            #{phone},
            #{status},
            #{deptId},
            #{createTime},
            #{createUser},
            #{updateTime},
            #{updateUser},
            #{version}
        )
    </insert>

    <!-- 更新记录 -->
    <update id="updateById">
        update sys_user set user_id = #{userId}
        <if test="account != null and account != ''">
            ,account=#{account}
        </if>
        <if test="password != null and password != ''">
            ,password=#{password}
        </if>
        <if test="name != null and name != ''">
            ,`name`=#{name}
        </if>
        <if test="birthday != null">
            ,birthday=#{birthday}
        </if>
        <if test="sex != null and sex != ''">
            ,sex=#{sex}
        </if>
        <if test="email != null and email != ''">
            ,email=#{email}
        </if>
        <if test="phone != null and phone != ''">
            ,phone=#{phone}
        </if>
        <if test="status != null and status != ''">
            ,status=#{status}
        </if>
        <if test="photo != null and photo != ''">
            ,photo=#{photo}
        </if>
        <if test="deptId != null and deptId != ''">
            ,dept_id=#{deptId}
        </if>
        <if test="updateUser != null and updateUser != ''">
            ,update_user=#{updateUser}
        </if>
        <if test="updateTime != null">
            ,update_time=#{updateTime}
        </if>
        <if test="version != null">
            ,version=#{version}
        </if>
        where user_id = #{userId}
    </update>

    <!-- 更新状态 -->
    <update id="setStatus">
        update sys_user set status = #{status} where user_id = #{userId}
    </update>

    <!-- 更新密码 -->
    <update id="changePwd">
        update sys_user set password = #{password},salt=#{salt} where user_id = #{userId}
    </update>

    <!-- 删除用户 -->
    <update id="deleteUser">
        update sys_user set del_flag = 1 where user_id = #{userId}
    </update>

    <!-- 清空角色 -->
    <update id="delAllRoles">
        DELETE from sys_user_role where user_id = #{userId}
    </update>

    <!-- 给用户添加关联角色 -->
    <insert id="addUserRole">
        INSERT INTO sys_user_role (
        id,user_id,role_id
        )VALUES (
        REPLACE(UUID(),'-',''),
        #{userId},
        #{roleId}
        )
    </insert>

</mapper>
