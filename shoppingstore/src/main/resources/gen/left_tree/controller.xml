<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/${subModuleName}/controller</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
package ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.controller;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Map;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.sailei.common.base.LayuiPage;
import com.sailei.common.service.R;
import com.sailei.common.base.ZTreeNode;
import org.springframework.ui.Model;
import com.sailei.common.utils.ToolUtils;
import java.util.List;
import org.springframework.web.bind.annotation.PathVariable;

import ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.entity.${ClassName};
import ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.service.${ClassName}Service;
<#list table.childList as c>
import ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.entity.${c.className?cap_first};
</#list>

/**
 * ${table.comments} 控制层
 *
 * @Author ${functionAuthor}
 * @Date ${functionDate}
 */
@Controller
@RequestMapping("/${urlPrefix}")
public class ${ClassName}Controller {

    /**
     * 记录日志
     */
    public static final Logger logger = LoggerFactory.getLogger(${ClassName}Controller.class);

    private static String PREFIX = "/modules/${moduleName}<#if subModuleName != "">/${subModuleName}</#if>";

    @Autowired
    private ${ClassName}Service ${className}Service;

    /**
	 * 主页面
	 */
    @RequestMapping("/index")
    public String index() {
        return PREFIX + "/${className}List.html";
    }

    /**
     * 跳转到添加页面
	 */
    @RequestMapping("/index_add")
    public String add(String id, Model model) {
    	if(ToolUtils.isNotEmpty(id)){
            ${ClassName} ${className} = ${className}Service.getById(id);
            if(${className} == null){
            	${className} = new ${ClassName}();
            	${className}.setId("0");
            	${className}.setName("顶级");
            }
            model.addAttribute("${className}", ${className});
        }
        return PREFIX + "/${className}AddForm.html";
    }

    /**
     * 跳转到修改页面
	 */
    @RequestMapping("/index_edit")
    public String edit() {
        return PREFIX + "/${className}EditForm.html";
    }

    /**
     * 获取tree列表,ztree格式
     *
     * @Author ${functionAuthor}
     * @Date ${functionDate}
     */
    @ResponseBody
    @RequestMapping(value = "/tree")
    public List<ZTreeNode> tree() {
        List<ZTreeNode> tree = ${className}Service.tree();
        tree.add(ZTreeNode.createParent());
        return tree;
    }

	/**
     * 获取树形列表
     *
     * @Author ${functionAuthor}
     * @Date ${functionDate}
     */
    @ResponseBody
    @RequiresPermissions("${permissionPrefix}:list")
    @RequestMapping(value = "/listTree")
    public Object listTree() {
        List<${ClassName}> ${className}s = ${className}Service.select${ClassName}Tree();
        LayuiPage result = new LayuiPage(${className}s, ${className}s.size());
        return result;
    }

    /**
     * 查看详情
     *
     * @Author ${functionAuthor}
     * @Date ${functionDate}
     */
    @ResponseBody
    @RequestMapping(value = "/detail/{${className}Id}")
    @RequiresPermissions("${permissionPrefix}:detail")
    public R detail(@PathVariable("${className}Id")String ${className}Id) {
        if (ToolUtils.isEmpty(${className}Id)) {
            return R.error("参数错误!");
        }

        /** 获取详细信息 */
        ${ClassName} ${className} = ${className}Service.getById(${className}Id);

        if(${className} == null || ${className}.getParentName() == null){
            ${className}.setParentName("顶级");
        }
        return R.ok().put("data", ${className});
    }

    /**
     * 新增记录
     *
     * @Author ${functionAuthor}
     * @Date ${functionDate}
     */
    @ResponseBody
    @RequiresPermissions("${permissionPrefix}:add")
    @RequestMapping(value = "/save")
    public R save(${ClassName} ${className}){
        try {
            ${className}Service.save(${className});
        }catch (Exception e){
            logger.error("保存出错:", e);
            return R.error("保存出错:" + e.getMessage());
        }
        return R.ok();
    }

    /**
     * 修改记录
     *
     * @Author ${functionAuthor}
     * @Date ${functionDate}
     */
    @ResponseBody
    @RequiresPermissions("${permissionPrefix}:edit")
    @RequestMapping(value = "/edit")
    public R updateById(${ClassName} ${className}){
        try {
            ${className}Service.updateById(${className});
        }catch (Exception e){
            logger.error("保存出错:", e);
            return R.error("保存出错:" + e.getMessage());
        }
        return R.ok();
    }

    /**
     * 根据ID移除记录
     *
     * @Author ${functionAuthor}
     * @Date ${functionDate}
     */
    @ResponseBody
    @RequiresPermissions("${permissionPrefix}:remove")
    @RequestMapping(value = "/remove")
    public R remove(@RequestParam String id) {
        try{
            return ${className}Service.remove(id);
        }catch (Exception e){
            logger.error("【根据ID移除记录】出错:", e);
            return R.error(e.getMessage());
        }
    }
}
]]>
	</content>
</template>